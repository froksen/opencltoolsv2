#include "groupcreator.h"
#include "ui_groupcreator.h"
#include <QStandardItemModel>
#include <QStandardItem>
#include <QDebug>

GroupCreator::GroupCreator(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::GroupCreator)
{
    ui->setupUi(this);

    //Laver databasen
    setDatabase(new Database());


    //Opdaterer tabellen
    updateAvailableMemebersTable();
    setSelectedMembers(new QStandardItemModel);

    calulateGroupSizeOptions();
}

GroupCreator::~GroupCreator()
{
    delete ui;
}

Database *GroupCreator::database() const
{
    return _database;
}

void GroupCreator::setDatabase(Database *database)
{
    _database = database;
}

QStandardItemModel *GroupCreator::selectedMembers() const
{
    return _selectedMembers;
}

void GroupCreator::setSelectedMembers(QStandardItemModel *selectedMembers)
{
    _selectedMembers = selectedMembers;
    ui->selectedMembers->setModel(selectedMembers);
    ui->selectedMembers->setSelectionBehavior(QAbstractItemView::SelectRows);
}

void GroupCreator::calulateGroupSizeOptions()
{
    //Variabler
    int membersCount = 17;
    int max = ui->groupSizeMax->value();
    int min = ui->groupSizeMin->value();
    float groupsByMax = 0.00;
    QList<QList<int>> validDivisors;

    //Fjerner tidligere muligheder
    ui->groupSizeOptions->clear();

    if(membersCount<max){
        ui->groupSizeOptions->addItem("Fejl: Maks>Antal valgte medlemmer!");
        return;
    }

    if(max<=min){
        ui->groupSizeOptions->addItem("Fejl: Maks=>min!");
        qDebug() << "Beregning af grupper: Maximum gruppestørrelse er større end minimum gruppestørrelse!";
        return;
    }

    double divisor;
    int divisorInteger;
    for(int maxSize=min;maxSize<=max;maxSize++){
        //Hvor mange gange kan det divideres
        divisor = membersCount/maxSize;

        //Hvor mange hele gange kan det divideres
        divisorInteger = floor(divisor);

//       qDebug() << "divisor" << divisor;
//       qDebug() <<  "divisorInteger" << divisorInteger;

        //Hvis der er en rest.
        if(membersCount % maxSize != 0){
            //Trækker en fra, da denne gruppe er et kommatal
            divisorInteger = divisorInteger -1;

            //Undersøger hvilke tal i intervallet der kan give hele divisorer.
            for(int num=min;num<=maxSize;num++){
                //Hvor mange medlemmer minus, hvor meget der kan laves med maxgruppe størrelse
                int leftOver = membersCount - divisorInteger*maxSize;

                //Hvis der ikke er nogen rest
                if(leftOver%num == 0){
                    QList<int> value;

                    //Størrelsen af max-size grupper
                    value.append(maxSize);
                    //Hvor mange max-size grupper
                    value.append(divisorInteger);

                    //Størrelsen af resterende grupper
                    value.append(num);
                    //Hvor mange gange det går op i leftOver
                    value.append(leftOver/num);
                    //Tilføjer til listen
                    validDivisors.append(value);
                }
            }
        }
        else{
            QList<int> value;

            //Størrelsen af hele grupper
            value.append(maxSize);
            //Hvor mange hele grupper
            value.append(divisorInteger);

            //Størrelsen af resterende grupper
            value.append(0);
            //Hvor mange gange det går op i leftOver
            value.append(0);

            //Tilføjer til listen
            validDivisors.append(value);
        }

    }

    //Tilføjer til Combobox
    foreach(QList<int> divisor, validDivisors){
        QString text;

        if(divisor.at(3)<=0){
           text = QString("(%0 grupper á %1 medlemmer)").arg(divisor.at(1)).arg(divisor.at(0));
        }
        else {
            text = QString("(%0 grupper á %1 medlemmer og %2 grupper á %3 medlemmer)").arg(divisor.at(1)).arg(divisor.at(0)).arg(divisor.at(3)).arg(divisor.at(2));
        }

        ui->groupSizeOptions->addItem(text);
    }

    //Opdaterer label
    ui->GroupSizeOptionsCount->setText("(" + QString::number(ui->groupSizeOptions->count()) + ")");

}


void GroupCreator::updateAvailableMemebersTable()
{
    QString createQry;

    createQry = "CREATE TABLE `tblPersoner` ("
                "`id`	INTEGER PRIMARY KEY AUTOINCREMENT,"
                "`navn`	TEXT"
            ");";

    ui->availableMembers->setModel(database()->selectTable("tblPersoner",createQry));
    ui->availableMembers->setSelectionBehavior(QAbstractItemView::SelectRows);
}

void GroupCreator::addMember()
{
    QModelIndexList indexes = ui->availableMembers->selectionModel()->selectedRows();

    foreach(QModelIndex index,indexes){
        //Finder index´et af id og navn
        QModelIndex idIndex = ui->availableMembers->model()->index(index.row(), 0, QModelIndex());
        QModelIndex nameIndex = ui->availableMembers->model()->index(index.row(), 1, QModelIndex());

        //Finder indholdet af id´et
        QString id = ui->availableMembers->model()->data(idIndex).toString();
        QString name = ui->availableMembers->model()->data(nameIndex).toString();

        //Tilføjer til modellen over valgte personer.
        int rowCount = selectedMembers()->rowCount();
        selectedMembers()->setItem(rowCount,0,new QStandardItem(id));
        selectedMembers()->setItem(rowCount,1,new QStandardItem(name));

        //Fjerner/skjuler fra modellen over mulige
        ui->availableMembers->hideRow(index.row());
    }

    ui->availableMembers->clearSelection();
}

void GroupCreator::removeMember()
{
    //ID´er der skal fjernes fra valgte liste
    QList<int> rowsToRemove;

    //Vender listen om, da det løser problemer længere nede.
    QModelIndexList indexes = ui->selectedMembers->selectionModel()->selectedRows();
    QModelIndexList rev_indexes;

    for(int i=indexes.count();i>0;i--){
        rev_indexes.append(indexes.at(i-1));
    }
    indexes = rev_indexes;

    //For hver af indexene
    foreach(QModelIndex index,indexes){
        //Finder index´et af id og navn
        QModelIndex idIndex = ui->selectedMembers->model()->index(index.row(), 0, QModelIndex());

        //Finder indholdet af id´et
        QString id = ui->selectedMembers->model()->data(idIndex).toString();

        //Viser det igen i tabellen over mulige personer
        ui->availableMembers->selectAll();
        QModelIndexList indexes2 = ui->availableMembers->selectionModel()->selectedRows();
        foreach(QModelIndex index2,indexes2){
            QString idToShow = index2.data().toString();

            if(id==idToShow){
                ui->availableMembers->showRow(index2.row());
                selectedMembers()->removeRow(index.row());
            }
        }
        //Fjerner/skjuler fra modellen over mulige
        rowsToRemove.append(index.row());
    }

    ui->availableMembers->clearSelection();
}

void GroupCreator::on_addMemberButton_clicked()
{
    addMember();
}

void GroupCreator::on_removeMemberButton_clicked()
{
    removeMember();
}

void GroupCreator::on_groupSizeMin_valueChanged(int arg1)
{
    if(arg1>ui->groupSizeMax->value()){
        ui->groupSizeMin->setValue(ui->groupSizeMax->value()-1);
        return;
    }

    calulateGroupSizeOptions();
}

void GroupCreator::on_groupSizeMax_valueChanged(int arg1)
{
    if(arg1<ui->groupSizeMax->value()){
        ui->groupSizeMin->setValue(arg1-1);
    }

    calulateGroupSizeOptions();
}
